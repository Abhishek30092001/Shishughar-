import frappe
from frappe import _
from datetime import date
import calendar

def execute(filters=None):
    selected_level = filters.get("level", "7")
    variable_columns = []


    if selected_level == "1":
        variable_columns.append({"label": "Partner", "fieldname": "partner", "fieldtype": "Data", "width": 160})
    if selected_level == "2":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
    if selected_level == "3":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "District", "fieldname": "district", "fieldtype": "Data", "width": 160})
    if selected_level == "4":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "District", "fieldname": "district", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Block", "fieldname": "block", "fieldtype": "Data", "width": 160})
    if selected_level == "5":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "District", "fieldname": "district", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Block", "fieldname": "block", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Supervisor", "fieldname": "supervisor", "fieldtype": "Data", "width": 160})
    if selected_level == "6":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "District", "fieldname": "district", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Block", "fieldname": "block", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "GP", "fieldname": "gp", "fieldtype": "Data", "width": 160})
    if selected_level == "7":
        variable_columns.append({"label": "State", "fieldname": "state", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "District", "fieldname": "district", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Block", "fieldname": "block", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "GP", "fieldname": "gp", "fieldtype": "Data", "width": 160})
        variable_columns.append({"label": "Creche", "fieldname": "creche", "fieldtype": "Data", "width": 180})
        variable_columns.append({"label": "Creche ID", "fieldname": "creche_id", "fieldtype": "Data", "width": 150},)
        

    fixed_columns = [
        {"label": "Active Creches", "fieldname": "act_creches", "fieldtype": "Int", "width": 140},
        {"label": "Eligible Children", "fieldname": "e_children", "fieldtype": "Int", "width": 140},
        {"label": "Enrolled Children", "fieldname": "enroll_children", "fieldtype": "Int", "width": 140},
        {"label": "Enrolled Children (%)", "fieldname": "avgpereli", "fieldtype": "float", "width": 200},
        {"label": "Children Attended Creche atleast one day", "fieldname": "uni_children", "fieldtype": "Int", "width": 300},
        {"label": "Children Attended (%)", "fieldname": "avgperenroll", "fieldtype": "float", "width": 200},  
        {"label": "Sum of Open Days for All Individual Children", "fieldname": "Total_eligible_open_days", "fieldtype": "Int", "width": 340},
        {"label": "Sum of Days Attended", "fieldname": "Total_days_attended", "fieldtype": "Int", "width": 190},
        {"label": "Attendance (%)", "fieldname": "attendance_percentage", "fieldtype": "float", "width": 170},
        {"label": "Avg. Attendance Per Day", "fieldname": "avg_attendance_per_day", "fieldtype": "float", "width": 195},
        {"label": "Min. Attendance", "fieldname": "min_att", "fieldtype": "Int", "width": 160},
        {"label": "Mean Attendance", "fieldname": "mean_att", "fieldtype": "Int", "width": 160},
        {"label": "Max. Attendance", "fieldname": "max_att", "fieldtype": "Int", "width": 160},

        {"label": "Attendance (0%)", "fieldname": "E0", "fieldtype": "Int", "width": 250},
        {"label": "Attendance (> 0% to < 25%)", "fieldname": "G0toL25", "fieldtype": "Int", "width": 280},
        {"label": "Attendance (25% to < 50%)", "fieldname": "25toL50", "fieldtype": "Int", "width": 250}, 
        
        {"label": "Attendance (50% to < 75%)", "fieldname": "50toL75", "fieldtype": "Int", "width": 250},
        {"label": "Attendance (75% to < 100%)", "fieldname": "75toL100", "fieldtype": "Int", "width": 280},
        {"label": "Attendance (100%)", "fieldname": "E100", "fieldtype": "Int", "width": 250}   

    ]

    columns = variable_columns + fixed_columns
    data = get_summary_data(filters)
    return columns, data


@frappe.whitelist()
def get_summary_data(filters=None):
    
    current_user_partner = frappe.db.get_value("User", frappe.session.user, "partner")
    partner_id = filters.get("partner") or current_user_partner
    state_query = """ 
        SELECT state_id, district_id, block_id, gp_id
        FROM `tabUser Geography Mapping`
        WHERE parent = %s
        ORDER BY state_id, district_id, block_id, gp_id
    """
    current_user_state = frappe.db.sql(state_query, frappe.session.user, as_dict=True)
    
    state_ids = ",".join(str(s["state_id"]) for s in current_user_state if s.get("state_id"))
    district_ids = ",".join(str(s["district_id"]) for s in current_user_state if s.get("district_id"))
    block_ids = ",".join(str(s["block_id"]) for s in current_user_state if s.get("block_id"))
    gp_ids = ",".join(str(s["gp_id"]) for s in current_user_state if s.get("gp_id"))

    # date range logic starts here
    start_date, end_date = None, None

    if(filters.get("time_range")):
        time_range = filters.get("time_range") if filters else None
        start_date, end_date = (time_range if time_range else (None, None))
    
    elif(filters.get("year") and filters.get("month")):
        current_date = date.today()
        month = int(filters.get("month")) if filters.get("month") else current_date.month
        year = int(filters.get("year")) if filters.get("year") else current_date.year
        start_date = date(year, month, 1)
        last_day = calendar.monthrange(year, month)[1]
        end_date = date(year, month, last_day)

    # date range logic ends here

    conditions = ["1=1"]
    params = {
        "partner":None,
        "partner":None,
        "state":None,
        "district":None,
        "block":None,
        "creche":None,
        "gp":None,
        "band":None,
        "start_date": start_date,
        "end_date": end_date, 
    }
    # filters logic for cr_opening starts here
    cstart_date, cend_date = None, None
    range_type = filters.get("cr_opening_range_type") if filters.get("cr_opening_range_type") else None

    if range_type:
        single_date = filters.get("single_date")
        date_range = filters.get("c_opening_range")

        if range_type == "between" and date_range and len(date_range) == 2:
            cstart_date, cend_date = date_range

        elif range_type == "before" and single_date:
            cstart_date, cend_date = date(2017, 1, 1), single_date

        elif range_type == "after" and single_date:
            cstart_date, cend_date = single_date, date.today()

        elif range_type == "equal" and single_date:
            cstart_date = cend_date = single_date

    # filters logic for cr_opening ends here

    if partner_id:
        conditions.append("c.partner_id = %(partner)s")
        params["partner"] = partner_id
    if filters and filters.get("state"):
        conditions.append("c.state_id = %(state)s")
        params["state"] = filters.get("state")
    elif state_ids:
        conditions.append("FIND_IN_SET(c.state_id, %(state_ids)s)")
        params["state_ids"] = state_ids

    if filters and filters.get("district"):
        conditions.append("c.district_id = %(district)s")
        params["district"] = filters.get("district")
    elif district_ids:
        conditions.append("FIND_IN_SET(c.district_id, %(district_ids)s)")
        params["district_ids"] = district_ids

    if filters and filters.get("block"):
        conditions.append("c.block_id = %(block)s")
        params["block"] = filters.get("block")
    elif block_ids:
        conditions.append("FIND_IN_SET(c.block_id, %(block_ids)s)")
        params["block_ids"] = block_ids

    if filters and filters.get("gp"):
        conditions.append("c.gp_id = %(gp)s")
        params["gp"] = filters.get("gp")
    elif gp_ids:
        conditions.append("FIND_IN_SET(c.gp_id, %(gp_ids)s)")
        params["gp_ids"] = gp_ids
        
    if filters.get("creche"):
        conditions.append("c.name = %(creche)s")
        params["creche"] = filters.get("creche")
    if filters.get("supervisor_id"):
        conditions.append("c.supervisor_id = %(supervisor_id)s")
        params["supervisor_id"] = filters.get("supervisor_id")
    if cstart_date or cend_date:
        conditions.append("(c.creche_opening_date BETWEEN %(cstart_date)s AND %(cend_date)s)")
        params["cstart_date"] = cstart_date if cstart_date else None  
        params["cend_date"] = cend_date if cend_date else None  
    if filters.get("band"):
        params["band"] = filters.get("band")
    if filters.get("c_status"):
        conditions.append("(c.creche_status_id = %(c_status)s)")
        params["c_status"] = filters.get("c_status")
    if filters.get("creche_status_id"):
        conditions.append("(c.creche_status_id = %(creche_status_id)s)")
        params["creche_status_id"] = filters.get("creche_status_id")
    if filters.get("phases"):
            phases_cleaned = ",".join(p.strip() for p in filters["phases"].split(",") if p.strip().isdigit())  
            if phases_cleaned:  
                conditions.append("FIND_IN_SET(c.phase, %(phases)s)")
                params["phases"] = phases_cleaned

    
    level_mapping = {
        "1": ["tf.partner"],
        "2": ["tf.state"],
        "3": ["tf.state", "tf.district"],
        "4": ["tf.state", "tf.district", "tf.block"],
        "5": ["tf.state", "tf.district", "tf.block", "tf.supervisor"],
        "6": ["tf.state", "tf.district", "tf.block", "tf.gp"],
        "7": ["tf.state", "tf.district", "tf.block", "tf.gp", "tf.creche"],
    }


    selected_level = filters.get("level", "7")
    group_by_fields = level_mapping.get(selected_level, level_mapping["7"])
    group_by_field = ", ".join(group_by_fields)


    select_fields = [
        "tf.partner AS partner", 
        "tf.state AS state", 
        "tf.district AS district", 
        "tf.block AS block",
        "tf.supervisor AS supervisor", 
        "tf.gp AS gp", 
        "tf.creche AS creche", 
    ]
    selected_fields = []
    for field in select_fields:
        if any(field.split(" AS ")[0].split(".")[1] in group_by_field for group_by_field in group_by_fields):
            selected_fields.append(field)

    where_clause = " AND ".join(conditions)

    query = f"""
    SELECT * FROM (
        SELECT
            {", ".join(selected_fields)},
            COUNT(*) AS act_creches,
            SUM(tf.e_children) AS e_children, 
            SUM(tf.enroll_children) AS enroll_children,
            SUM(tf.uni_children) AS uni_children,
            SUM(tf.Total_eligible_open_days) as Total_eligible_open_days,
            SUM(tf.Total_days_attended) as Total_days_attended,
            
            SUM(tf.E0) AS E0,
            SUM(tf.G0toL25) AS G0toL25,
            SUM(tf.25toL50) AS 25toL50,
            SUM(tf.50toL75) AS 50toL75,
            SUM(tf.75toL100) AS 75toL100,
            SUM(tf.E100) AS E100,

            SUM((tf.min_att)) AS min_att,
            SUM(tf.mean_att) AS mean_att,
            SUM(tf.max_att) AS max_att,
            tf.creche_id AS creche_id,

            CASE WHEN SUM(tf.opn_days_count) = 0 THEN 0 ELSE ROUND(SUM(tf.att_count) * 1.0 / SUM(tf.opn_days_count), 1) END AS avg_attendance_per_day,
            CASE WHEN SUM(tf.enroll_children) = 0 THEN 0 ELSE FORMAT(( SUM(tf.uni_children) /  SUM(tf.enroll_children))*100.0, 2) END AS avgperenroll,
            CASE WHEN SUM(tf.e_children) = 0 THEN 0 ELSE FORMAT(( SUM(tf.enroll_children) /  SUM(tf.e_children))*100.0, 2) END AS avgpereli,
            COALESCE(ROUND(( SUM(tf.Total_days_attended) * 100.0 / NULLIF( SUM(tf.Total_eligible_open_days), 0)), 2), 0) AS attendance_percentage,
            CASE 
                WHEN SUM(tf.Total_eligible_open_days) = 0 THEN 0
                WHEN ROUND( SUM(tf.Total_days_attended) * 100.0 /  SUM(tf.Total_eligible_open_days), 2) BETWEEN 0 AND 25 THEN 1
                WHEN ROUND( SUM(tf.Total_days_attended) * 100.0 /  SUM(tf.Total_eligible_open_days), 2) BETWEEN 26 AND 50 THEN 2
                WHEN ROUND( SUM(tf.Total_days_attended) * 100.0 /  SUM(tf.Total_eligible_open_days), 2) BETWEEN 51 AND 75 THEN 3
                WHEN ROUND( SUM(tf.Total_days_attended) * 100.0 /  SUM(tf.Total_eligible_open_days), 2) BETWEEN 76 AND 100 THEN 4
                ELSE 0 
            END AS band
        FROM (
            SELECT 
                p.partner_name AS partner,
                s.state_name AS state,
                d.district_name AS district,
                b.block_name AS block,
                g.gp_name AS gp,
                tu.full_name as supervisor,
                v.village_name AS village,
                c.creche_name AS creche,
                c.creche_id,
                IFNULL(ec.e_children, 0) AS e_children,
                IFNULL(erc.enroll_children, 0) AS enroll_children,
                IFNULL(uc.uni_children, 0) AS uni_children,
                IFNULL(opx.days_attended, 0) AS Total_days_attended,
                IFNULL(opx.eligible_open_days, 0) AS Total_eligible_open_days,

                IFNULL(opx.E0, 0) AS E0,
                IFNULL(opx.G0toL25, 0) AS G0toL25,
                IFNULL(opx.25toL50, 0) AS 25toL50,
                IFNULL(opx.50toL75, 0) AS 50toL75,
                IFNULL(opx.75toL100, 0) AS 75toL100,
                IFNULL(opx.E100, 0) AS E100,

                IFNULL(att_mmm.min_att, 0) AS min_att,
                IFNULL(att_mmm.mean_att, 0) AS mean_att,
                IFNULL(att_mmm.max_att, 0) AS max_att,
                
                IFNULL(opx.days_attended, 0)  AS att_count,
                IFNULL(days_cr_open.open_days_count, 0) AS opn_days_count
                
                                
            FROM `tabCreche` AS c 
            JOIN `tabState` AS s ON c.state_id = s.name 
            INNER JOIN `tabDistrict` AS d ON c.district_id = d.name
            INNER JOIN `tabBlock` AS b ON c.block_id = b.name
            INNER JOIN `tabGram Panchayat` AS g ON c.gp_id = g.name
            INNER JOIN `tabVillage` AS v ON c.village_id = v.name
            INNER JOIN `tabPartner` AS p ON c.partner_id = p.name 
            INNER JOIN  tabUser tu ON c.supervisor_id = tu.name
            
            LEFT JOIN (
                SELECT hf.creche_id, COUNT(hhc.hhcguid) AS e_children
                FROM `tabHousehold Child Form` AS hhc 
                JOIN `tabHousehold Form` AS hf ON hf.name = hhc.parent
                WHERE (%(partner)s IS NULL OR partner_id = %(partner)s) AND hhc.is_dob_available = 1 
                    AND TIMESTAMPDIFF(MONTH, hhc.child_dob, %(end_date)s) BETWEEN 6 AND 36
                    AND (%(partner)s IS NULL OR hf.partner_id = %(partner)s) 
                    AND (%(state)s IS NULL OR hf.state_id = %(state)s) 
                    AND (%(district)s IS NULL OR hf.district_id = %(district)s)
                    AND (%(block)s IS NULL OR hf.block_id = %(block)s)
                    AND (%(gp)s IS NULL OR hf.gp_id = %(gp)s)
                    AND (%(creche)s IS NULL OR hf.creche_id = %(creche)s)
                GROUP BY hf.creche_id
            ) AS ec ON c.name = ec.creche_id
            LEFT JOIN (
                SELECT creche_id, COUNT(*) AS enroll_children
                FROM `tabChild Enrollment and Exit` as ceex
                WHERE ceex.date_of_enrollment <= %(end_date)s and (date_of_exit IS null or date_of_exit >=  %(start_date)s)
                    AND (%(partner)s IS NULL OR ceex.partner_id = %(partner)s) 
                    AND (%(state)s IS NULL OR ceex.state_id = %(state)s) 
                    AND (%(district)s IS NULL OR ceex.district_id = %(district)s)
                    AND (%(block)s IS NULL OR ceex.block_id = %(block)s)
                    AND (%(gp)s IS NULL OR ceex.gp_id = %(gp)s)
                    AND (%(creche)s IS NULL OR ceex.creche_id = %(creche)s)
                GROUP BY creche_id
            ) AS erc ON c.name = erc.creche_id
            LEFT JOIN (
                SELECT ca.creche_id, COUNT(DISTINCT cal.childenrolledguid) AS uni_children
                FROM `tabChild Attendance List` AS cal
                JOIN `tabChild Attendance` AS ca ON ca.name = cal.parent
                WHERE cal.attendance = 1
                AND ca.is_shishu_ghar_is_closed_for_the_day = 0 
                AND ca.date_of_attendance BETWEEN %(start_date)s AND %(end_date)s
                AND (%(partner)s IS NULL OR ca.partner_id = %(partner)s)
                AND (%(state)s IS NULL OR ca.state_id = %(state)s) 
                AND (%(district)s IS NULL OR ca.district_id = %(district)s)
                AND (%(block)s IS NULL OR ca.block_id = %(block)s)
                AND (%(gp)s IS NULL OR ca.gp_id = %(gp)s)
                AND (%(creche)s IS NULL OR ca.creche_id = %(creche)s)
                GROUP BY ca.creche_id
            ) AS uc ON c.name = uc.creche_id
       
            LEFT JOIN(
                      SELECT creche_id, SUM(days_attended) AS days_attended, 
                      SUM(eligible_open_days) AS eligible_open_days, 
                      SUM(CASE  WHEN catt_per IS NULL OR catt_per = 0 THEN 1 ELSE 0 END) AS E0,
	                  SUM(CASE  WHEN catt_per > 0 AND catt_per < 25 THEN 1 ELSE 0 END) AS G0toL25,
	                  SUM(CASE  WHEN catt_per >= 25 AND catt_per < 50 THEN 1 ELSE 0 END) AS 25toL50,
	                  SUM(CASE  WHEN catt_per >= 50 AND catt_per < 75 THEN 1 ELSE 0 END) AS 50toL75,
	                  SUM(CASE  WHEN catt_per >= 75 AND catt_per < 100 THEN 1 ELSE 0 END) AS 75toL100,
	                  SUM(CASE  WHEN catt_per = 100 THEN 1 ELSE 0 END) AS E100
                    FROM (
                        SELECT CAT.creche_id, CAT.childenrollguid, days_attended, eligible_open_days,  
                        CASE WHEN eligible_open_days = 0 THEN 0 ELSE (days_attended / eligible_open_days) * 100.0 END AS catt_per
                                            FROM (
                        SELECT cee.creche_id, cee.childenrollguid, chatt.days_attended, chatt.eligible_open_days  FROM `tabChild Enrollment and Exit` cee
                        LEFT JOIN (
                        SELECT cal.childenrolledguid, COUNT(CASE WHEN cal.attendance = 1 THEN 1 END) AS days_attended, COUNT(ca.date_of_attendance) AS eligible_open_days
                                                FROM `tabChild Attendance` AS ca
                                                INNER JOIN `tabChild Attendance List` AS cal 
                                                    ON cal.parent = ca.name
                                                WHERE ca.is_shishu_ghar_is_closed_for_the_day = 0
                                                AND ca.date_of_attendance BETWEEN %(start_date)s AND %(end_date)s  
                                                AND (%(partner)s IS NULL OR ca.partner_id = %(partner)s) 
                                                AND (%(state)s IS NULL OR ca.state_id = %(state)s) 
                                                AND (%(district)s IS NULL OR ca.district_id = %(district)s)
                                                AND (%(block)s IS NULL OR ca.block_id = %(block)s)
                                                AND (%(gp)s IS NULL OR ca.gp_id = %(gp)s)
                                                AND (%(creche)s IS NULL OR ca.creche_id = %(creche)s)                               
                                                GROUP BY cal.childenrolledguid
                        ) AS chatt ON chatt.childenrolledguid = cee.childenrollguid 
                        WHERE cee.date_of_enrollment <= %(end_date)s and (cee.date_of_exit IS null or cee.date_of_exit >= %(start_date)s)) AS CAT) AS AttendanceData
                        GROUP BY creche_id
            ) as opx  ON opx.creche_id = c.name

            LEFT JOIN (
                SELECT creche_id, MIN(daily_attendance) AS min_att, CEIL((SUM(daily_attendance)/ COUNT(*))) AS mean_att, MAX(daily_attendance) AS max_att
                 FROM (
                    SELECT ca.creche_id,ca.date_of_attendance, COUNT(*) AS daily_attendance
                    FROM `tabChild Attendance` ca
                    JOIN `tabChild Attendance List` cal ON ca.name = cal.parent
                    WHERE ca.is_shishu_ghar_is_closed_for_the_day = 0
                      AND ca.date_of_attendance BETWEEN %(start_date)s AND %(end_date)s
                      AND cal.attendance = 1
                      AND (%(partner)s IS NULL OR ca.partner_id = %(partner)s) 
                      AND (%(state)s IS NULL OR ca.state_id = %(state)s) 
                      AND (%(district)s IS NULL OR ca.district_id = %(district)s)
                      AND (%(block)s IS NULL OR ca.block_id = %(block)s)
                      AND (%(gp)s IS NULL OR ca.gp_id = %(gp)s)
                      AND (%(creche)s IS NULL OR ca.creche_id = %(creche)s)
                    GROUP BY ca.creche_id, ca.date_of_attendance) AS daily_data
                    GROUP BY creche_id
            ) as att_mmm ON att_mmm.creche_id =  c.name

            LEFT JOIN (
                SELECT ca.creche_id, COUNT(*) as open_days_count
                FROM `tabChild Attendance` ca
                WHERE ca.is_shishu_ghar_is_closed_for_the_day = 0
                AND ca.date_of_attendance BETWEEN %(start_date)s AND %(end_date)s
                AND (%(partner)s IS NULL OR ca.partner_id = %(partner)s) 
                AND (%(state)s IS NULL OR ca.state_id = %(state)s) 
                AND (%(district)s IS NULL OR ca.district_id = %(district)s)
                AND (%(block)s IS NULL OR ca.block_id = %(block)s)
                AND (%(gp)s IS NULL OR ca.gp_id = %(gp)s)
                AND (%(creche)s IS NULL OR ca.creche_id = %(creche)s)
                GROUP BY ca.creche_id    
            ) AS days_cr_open ON days_cr_open.creche_id = c.name 
            WHERE {where_clause}
        ) AS tf
        GROUP BY {group_by_field}
        ORDER BY {group_by_field}
    ) AS td
    WHERE (%(band)s IS NULL OR td.band = %(band)s);
        """
    
    data = frappe.db.sql(query, params, as_dict=True)

    total_act_creches = sum(row.get('act_creches', 0) for row in data)
    total_e_children = sum(row.get('e_children', 0) for row in data)
    total_enroll_children = sum(row.get('enroll_children', 0) for row in data)
    total_uni_children = sum(row.get('uni_children', 0) for row in data)
    total_eligible_open_days = sum(row.get('Total_eligible_open_days', 0) for row in data)
    total_days_attended = sum(row.get('Total_days_attended', 0) for row in data)
     
    total_E0 = sum(row.get('E0', 0) for row in data)
    total_G0toL25 = sum(row.get('G0toL25', 0) for row in data)
    total_25toL50 = sum(row.get('25toL50', 0) for row in data)
    total_50toL75 = sum(row.get('50toL75', 0) for row in data)
    total_75toL100 = sum(row.get('75toL100', 0) for row in data)
    total_E100 = sum(row.get('E100', 0) for row in data)

    total_min_att = sum(row.get('min_att', 0) for row in data)
    total_mean_att = sum(row.get('mean_att', 0) for row in data)
    total_max_att = sum(row.get('max_att', 0) for row in data)
    
   

    total_attendance_percentage = round((total_days_attended * 100.0 / total_eligible_open_days), 2) if total_eligible_open_days else 0


    total_row = {
        "state": "<b style='color:black;'>Total</b>",
        "act_creches": total_act_creches,
        "e_children": total_e_children,
        "enroll_children": total_enroll_children,
        "uni_children": total_uni_children,
        "Total_eligible_open_days": total_eligible_open_days,
        "Total_days_attended": total_days_attended,
        "attendance_percentage": total_attendance_percentage,
        "avgperenroll": round((total_uni_children * 100.0 / total_enroll_children), 2) if total_enroll_children else 0,
        "avgpereli": round((total_enroll_children * 100.0 / total_e_children), 2) if total_e_children else 0,
         
        "E0": total_E0,
        "G0toL25": total_G0toL25,
        "25toL50": total_25toL50,
        "50toL75": total_50toL75,
        "75toL100": total_75toL100,
        "E100": total_E100,

        "min_att": total_min_att,
        "mean_att": total_mean_att,
        "max_att": total_max_att,
    }

    data.append(total_row)
    return data